[1mdiff --git a/nefertari/authentication/models.py b/nefertari/authentication/models.py[m
[1mindex 1b2ff73..f843e93 100644[m
[1m--- a/nefertari/authentication/models.py[m
[1m+++ b/nefertari/authentication/models.py[m
[36m@@ -37,7 +37,7 @@[m [mclass AuthModelDefaultMixin(object):[m
 [m
     @classmethod[m
     def token_credentials(cls, username, request):[m
[31m-        """ Get username and api token for user with username of :username:[m
[32m+[m[32m        """ Get api token for user with username of :username:[m
 [m
         Is used by Token-based auth as `credentials_callback` kwarg.[m
         """[m
[36m@@ -47,8 +47,7 @@[m [mclass AuthModelDefaultMixin(object):[m
             log.error(unicode(ex))[m
             forget(request)[m
         if user:[m
[31m-            return user.username, user.api_key.token[m
[31m-        return None, None[m
[32m+[m[32m            return user.api_key.token[m
 [m
     @classmethod[m
     def groups_by_token(cls, username, token, request):[m
[1mdiff --git a/nefertari/authentication/policies.py b/nefertari/authentication/policies.py[m
[1mindex c54a198..39c61b7 100644[m
[1m--- a/nefertari/authentication/policies.py[m
[1m+++ b/nefertari/authentication/policies.py[m
[36m@@ -1,6 +1,6 @@[m
 from pyramid.authentication import CallbackAuthenticationPolicy[m
 [m
[31m-from nefertari import engine as eng[m
[32m+[m[32mfrom nefertari import engine[m
 from .models import apikey_model[m
 [m
 [m
[36m@@ -29,15 +29,15 @@[m [mclass ApiKeyAuthenticationPolicy(CallbackAuthenticationPolicy):[m
                 principal identifiers (possibly empty) if the user does exist.[m
                 If callback is None, the username will be assumed to exist with[m
                 no principals. Optional.[m
[31m-            :credentials_callback: A callback passed the username, expected to[m
[31m-                return tuple containing 2 elements: username and user's api key.[m
[32m+[m[32m            :credentials_callback: A callback passed the username and current[m
[32m+[m[32m                request, expected to return and user's api key.[m
                 Is used to generate 'WWW-Authenticate' header with a value of[m
                 valid 'Authorization' request header that should be used to[m
                 perform requests.[m
         """[m
         self.user_model = user_model[m
         if isinstance(self.user_model, basestring):[m
[31m-            self.user_model = eng.get_document_cls(self.user_model)[m
[32m+[m[32m            self.user_model = engine.get_document_cls(self.user_model)[m
         apikey_model(self.user_model)[m
 [m
         self.check = check[m
[36m@@ -49,7 +49,7 @@[m [mclass ApiKeyAuthenticationPolicy(CallbackAuthenticationPolicy):[m
         in 'Authorization' header.[m
         """[m
         if self.credentials_callback:[m
[31m-            username, token = self.credentials_callback(username, request)[m
[32m+[m[32m            token = self.credentials_callback(username, request)[m
             api_key = 'ApiKey {}:{}'.format(username, token)[m
             return [('WWW-Authenticate', api_key)][m
 [m
